Summary:
 - Directory: /Users/gokulcholaghar/Vercel/redis-migration-ui
 - Files processed: 36
 - Total lines: 2153
 - Duration: 0.02 seconds
================================================================================
Directory Structure:

├── @/
│   └── components/
│       └── ui/
│           ├── alert.tsx
│           ├── button.tsx
│           ├── card.tsx
│           ├── input.tsx
│           ├── label.tsx
│           ├── switch.tsx
│           └── tabs.tsx
├── lib/
├── pages/
├── public/
├── scripts/
│   ├── monitor-migration.ts
│   ├── monitor-sync.ts
│   └── test-realtime.ts
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   └── migration/
│   │   │       ├── [action]/
│   │   │       │   └── route.ts
│   │   │       └── events/
│   │   │           └── route.ts
│   │   ├── fonts/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components/
│   │   ├── ui/
│   │   │   ├── alert.tsx
│   │   │   ├── button.tsx
│   │   │   ├── card.tsx
│   │   │   ├── input.tsx
│   │   │   ├── label.tsx
│   │   │   ├── switch.tsx
│   │   │   └── tabs.tsx
│   │   └── performance-chart.tsx
│   ├── lib/
│   │   ├── migration-store.ts
│   │   ├── redis-migrator.ts
│   │   └── utils.ts
│   └── types/
│       └── react-native.d.ts
├── .eslintrc.json
├── README.md
├── components.json
├── docker-compose.yml
├── next-env.d.ts
├── next.config.js
├── package.json
├── tailwind.config.ts
└── tsconfig.json

Files extracted:
.eslintrc.json (starts at line 1)
README.md (starts at line 10)
components.json (starts at line 48)
docker-compose.yml (starts at line 65)
next-env.d.ts (starts at line 85)
next.config.js (starts at line 92)
package.json (starts at line 99)
tailwind.config.ts (starts at line 148)
tsconfig.json (starts at line 214)
@/components/ui/alert.tsx (starts at line 255)
@/components/ui/button.tsx (starts at line 315)
@/components/ui/card.tsx (starts at line 372)
@/components/ui/input.tsx (starts at line 452)
@/components/ui/label.tsx (starts at line 478)
@/components/ui/switch.tsx (starts at line 505)
@/components/ui/tabs.tsx (starts at line 535)
scripts/monitor-migration.ts (starts at line 591)
scripts/monitor-sync.ts (starts at line 633)
scripts/test-realtime.ts (starts at line 671)
src/app/globals.css (starts at line 740)
src/app/layout.tsx (starts at line 800)
src/app/page.tsx (starts at line 836)
src/app/api/migration/[action]/route.ts (starts at line 1232)
src/app/api/migration/events/route.ts (starts at line 1322)
src/components/performance-chart.tsx (starts at line 1402)
src/components/ui/alert.tsx (starts at line 1444)
src/components/ui/button.tsx (starts at line 1504)
src/components/ui/card.tsx (starts at line 1561)
src/components/ui/input.tsx (starts at line 1641)
src/components/ui/label.tsx (starts at line 1670)
src/components/ui/switch.tsx (starts at line 1697)
src/components/ui/tabs.tsx (starts at line 1727)
src/lib/migration-store.ts (starts at line 1783)
src/lib/redis-migrator.ts (starts at line 1805)
src/lib/utils.ts (starts at line 2140)
src/types/react-native.d.ts (starts at line 2147)

================================================================================

File: .eslintrc.json (starts at line 1)

{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "rules": {
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": "warn",
    "prefer-const": "warn"
  }
}



================================================================================

File: README.md (starts at line 10)

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
# redis-migrator



================================================================================

File: components.json (starts at line 48)

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}


================================================================================

File: docker-compose.yml (starts at line 65)

version: "3.8"
services:
  redis-source:
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--notify-keyspace-events", "AKE"]  # Changed to include all events
    volumes:
      - redis-source-data:/data

  redis-target:
    image: redis:latest
    ports:
      - "6380:6379"
    volumes:
      - redis-target-data:/data

volumes:
  redis-source-data:
  redis-target-data:


================================================================================

File: next-env.d.ts (starts at line 85)

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.



================================================================================

File: next.config.js (starts at line 92)

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
};

export default nextConfig;



================================================================================

File: package.json (starts at line 99)

{
  "name": "redis-migration-ui",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "generate-data": "ts-node --esm --project tsconfig.json scripts/generate-test-data.ts",
    "monitor": "ts-node --esm scripts/monitor-migration.ts",
    "verify": "ts-node --esm scripts/verify-migration.ts",
    "test-realtime": "node --loader ts-node/esm scripts/test-realtime.ts",
    "monitor-sync": "ts-node --esm scripts/monitor-sync.ts"
  },
  "dependencies": {
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.5",
    "ioredis": "^5.4.1",
    "lucide-react": "^0.453.0",
    "next": "14.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "recharts": "^2.13.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/ioredis": "^5.0.0",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-native": "^0.73.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  }
}



================================================================================

File: tailwind.config.ts (starts at line 148)

import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: ["class"],
  content: [
    './src/pages/**/*.{ts,tsx}',
    './src/components/**/*.{ts,tsx}',
    './src/app/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

export default config



================================================================================

File: tsconfig.json (starts at line 214)

{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowJs": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "noEmit": true,
    "incremental": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "ts-node": {
    "esm": true,
    "experimentalSpecifierResolution": "node"
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================================================

File: @/components/ui/alert.tsx (starts at line 255)

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================================================

File: @/components/ui/button.tsx (starts at line 315)

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================================================

File: @/components/ui/card.tsx (starts at line 372)

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================================================

File: @/components/ui/input.tsx (starts at line 452)

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================================================

File: @/components/ui/label.tsx (starts at line 478)

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================================================

File: @/components/ui/switch.tsx (starts at line 505)

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================================================

File: @/components/ui/tabs.tsx (starts at line 535)

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================================================

File: scripts/monitor-migration.ts (starts at line 591)

import Redis from 'ioredis';

async function monitorMigration() {
  // Source Redis
  const sourceRedis = new Redis();

  // Target Redis
  const targetRedis = new Redis();

  try {
    // Initial counts
    const sourceCount = await sourceRedis.dbsize();
    const targetCount = await targetRedis.dbsize();
    
    console.log('Initial state:');
    console.log(`Source keys: ${sourceCount}`);
    console.log(`Target keys: ${targetCount}`);
    
    // Monitor progress
    setInterval(async () => {
      const currentSourceCount = await sourceRedis.dbsize();
      const currentTargetCount = await targetRedis.dbsize();
      
      console.log('\nCurrent state:');
      console.log(`Source keys: ${currentSourceCount}`);
      console.log(`Target keys: ${currentTargetCount}`);
      
      if (currentTargetCount > 0) {
        const progress = ((currentTargetCount / sourceCount) * 100).toFixed(2);
        console.log(`Progress: ${progress}%`);
      }
      
    }, 5000); // Check every 5 seconds

  } catch (error) {
    console.error('Error monitoring migration:', error);
  }
}

// Run the monitoring
monitorMigration().catch(console.error);



================================================================================

File: scripts/monitor-sync.ts (starts at line 633)

import Redis from 'ioredis';

async function monitorSync() {
  const source = new Redis(6379);
  const target = new Redis(6380);
  let lastSourceCount = 0;
  let lastTargetCount = 0;
  let startTime = Date.now();

  console.log('Starting monitoring...');

  setInterval(async () => {
    try {
      // Get current counts
      const sourceCount = await source.dbsize();
      const targetCount = await target.dbsize();
      const elapsed = (Date.now() - startTime) / 1000;

      // Calculate rates
      const sourceRate = (sourceCount - lastSourceCount);
      const targetRate = (targetCount - lastTargetCount);

      console.log('\n=== Status Update ===');
      console.log(`Time elapsed: ${elapsed.toFixed(1)}s`);
      console.log(`Source keys: ${sourceCount} (+${sourceRate}/sec)`);
      console.log(`Target keys: ${targetCount} (+${targetRate}/sec)`);
      console.log(`Lag: ${sourceCount - targetCount} keys`);
      console.log(`Sync rate: ${((targetCount / sourceCount) * 100).toFixed(1)}%`);

      lastSourceCount = sourceCount;
      lastTargetCount = targetCount;
    } catch (error) {
      console.error('Monitoring error:', error);
    }
  }, 1000);
}

monitorSync().catch(console.error);


================================================================================

File: scripts/test-realtime.ts (starts at line 671)

import Redis from 'ioredis';
import { RedisMigrator } from '../src/lib/redis-migrator';

async function testRealTimeSync() {
  console.log('Starting real-time sync test...');

  const migrator = new RedisMigrator(
    { host: 'localhost', port: 6379 },
    { host: 'localhost', port: 6380 }
  );

  // Monitor migration progress
  migrator.on('progress', (stats) => {
    console.log(`Progress: ${stats.percent}% - ${stats.keysPerSecond} keys/sec`);
  });

  migrator.on('keyProcessed', (data) => {
    console.log(`Processed key: ${data.key} (${data.operation})`);
  });

  migrator.on('error', (error) => {
    console.error('Error:', error.message);
  });

  // Start migration
  await migrator.start();

  // Generate test data
  const source = new Redis(6379);
  let counter = 0;

  // Add test data every 100ms
  const interval = setInterval(async () => {
    try {
      const key = `test:${Date.now()}:${counter}`;
      await source.set(key, `value-${counter}`);
      counter++;

      // Print stats every 10 keys
      if (counter % 10 === 0) {
        const sourceCount = await source.dbsize();
        const targetCount = await new Redis(6380).dbsize();
        console.log(`\nSource: ${sourceCount} keys`);
        console.log(`Target: ${targetCount} keys`);
        console.log(`Difference: ${sourceCount - targetCount} keys`);
      }

      // Stop after 1000 keys
      if (counter >= 1000) {
        clearInterval(interval);
        await cleanup();
      }
    } catch (error) {
      console.error('Error generating data:', error);
    }
  }, 100);

  async function cleanup() {
    console.log('\nCleaning up...');
    await migrator.cleanup();
    process.exit(0);
  }

  // Handle interrupts
  process.on('SIGINT', cleanup);
}

testRealTimeSync().catch(console.error);



================================================================================

File: src/app/globals.css (starts at line 740)

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================================================

File: src/app/layout.tsx (starts at line 800)

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}



================================================================================

File: src/app/page.tsx (starts at line 836)

"use client";
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';
import { PerformanceChart } from '@/components/performance-chart';

interface RedisConfig {
  host: string;
  port: string;
  password?: string;
  tls: boolean;
}

interface MigrationStatus {
  isRunning: boolean;
  progress: number;
  keysProcessed: number;
  totalKeys: number;
  currentSpeed: number;
  errors: string[];
  lastUpdate?: Date;
  recentOperations?: Array<{
    key: string;
    operation: string;
    timestamp: Date;
  }>;
}

interface PerformanceData {
  timestamp: number;
  speed: number;
  keysProcessed: number;
}

export default function RedisMigration() {
  const [source, setSource] = useState<RedisConfig>({
    host: '',
    port: '6379',
    password: '',
    tls: false,
  });

  const [target, setTarget] = useState<RedisConfig>({
    host: '',
    port: '6379',
    password: '',
    tls: false,
  });

  const [status, setStatus] = useState<MigrationStatus>({
    isRunning: false,
    progress: 0,
    keysProcessed: 0,
    totalKeys: 0,
    currentSpeed: 0,
    errors: [],
  });

  const [performanceHistory, setPerformanceHistory] = useState<PerformanceData[]>([]);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    if (status.isRunning) {
      const eventSource = new EventSource('/api/migration/events');
      
      eventSource.onmessage = (event) => {
        const data = JSON.parse(event.data);
        setStatus(prev => ({
          ...prev,
          ...data,
        }));
      };

      return () => {
        eventSource.close();
      };
    }
  }, [status.isRunning]);

  useEffect(() => {
    let pollInterval: NodeJS.Timeout;

    if (status.isRunning) {
      // Initial poll
      pollStatus();
      
      // Set up polling interval (every second)
      pollInterval = setInterval(pollStatus, 1000);
    }

    return () => {
      if (pollInterval) {
        clearInterval(pollInterval);
      }
    };
  }, [status.isRunning]);

  const startMigration = async () => {
    try {
      console.log('Starting migration...', { source, target });
      const response = await fetch('/api/migration/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ source, target }),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to start migration');
      }
  
      const data = await response.json();
      setStatus(prev => ({
        ...prev,
        isRunning: true,
        errors: [],
        progress: 0,
        keysProcessed: 0,
        totalKeys: 0,
        currentSpeed: 0
      }));
      setPerformanceHistory([]);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      console.error('Migration error:', errorMessage);
      setStatus(prev => ({
        ...prev,
        errors: [...prev.errors, errorMessage],
        isRunning: false
      }));
    }
  };

  const stopMigration = async () => {
    try {
      const response = await fetch('/api/migration/stop', { method: 'POST' });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to stop migration');
      }

      setStatus(prev => ({ ...prev, isRunning: false }));
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      setStatus(prev => ({
        ...prev,
        errors: [...prev.errors, errorMessage],
      }));
    }
  };

  const pollStatus = async () => {
    try {
      const response = await fetch('/api/migration/status');
      const data = await response.json();
      
      setStatus(prev => ({ ...prev, ...data }));
      
      // Update performance history
      setPerformanceHistory(prev => [
        ...prev,
        {
          timestamp: Date.now(),
          speed: data.currentSpeed,
          keysProcessed: data.keysProcessed,
        },
      ].slice(-60)); // Keep last 60 seconds
    } catch (error) {
      console.error('Failed to fetch status:', error);
    }
  };

  const formatDuration = (ms: number) => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
  };

  const estimateTimeRemaining = () => {
    if (status.currentSpeed <= 0) return 'Calculating...';
    const remainingKeys = status.totalKeys - status.keysProcessed;
    const secondsRemaining = remainingKeys / status.currentSpeed;
    return formatDuration(secondsRemaining * 1000);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Redis Migration Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Source Configuration */}
        <Card>
          <CardHeader>
            <CardTitle>Source Redis</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label>Host</Label>
                <Input
                  value={source.host}
                  onChange={e => setSource(prev => ({ ...prev, host: e.target.value }))}
                  placeholder="localhost"
                />
              </div>
              <div>
                <Label>Port</Label>
                <Input
                  value={source.port}
                  onChange={e => setSource(prev => ({ ...prev, port: e.target.value }))}
                  placeholder="6379"
                />
              </div>
              <div>
                <Label>Password</Label>
                <Input
                  type="password"
                  value={source.password}
                  onChange={e => setSource(prev => ({ ...prev, password: e.target.value }))}
                  placeholder="Optional"
                />
              </div>
              <div className="flex items-center space-x-2">
                <Switch
                  checked={source.tls}
                  onCheckedChange={checked => setSource(prev => ({ ...prev, tls: checked }))}
                />
                <Label>TLS Enabled</Label>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Target Configuration */}
        <Card>
          <CardHeader>
            <CardTitle>Target Redis</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label>Host</Label>
                <Input
                  value={target.host}
                  onChange={e => setTarget(prev => ({ ...prev, host: e.target.value }))}
                  placeholder="localhost"
                />
              </div>
              <div>
                <Label>Port</Label>
                <Input
                  value={target.port}
                  onChange={e => setTarget(prev => ({ ...prev, port: e.target.value }))}
                  placeholder="6379"
                />
              </div>
              <div>
                <Label>Password</Label>
                <Input
                  type="password"
                  value={target.password}
                  onChange={e => setTarget(prev => ({ ...prev, password: e.target.value }))}
                  placeholder="Optional"
                />
              </div>
              <div className="flex items-center space-x-2">
                <Switch
                  checked={target.tls}
                  onCheckedChange={checked => setTarget(prev => ({ ...prev, tls: checked }))}
                />
                <Label>TLS Enabled</Label>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Migration Controls & Status */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>Migration Status</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="performance">Performance</TabsTrigger>
              <TabsTrigger value="operations">Recent Operations</TabsTrigger>
              <TabsTrigger value="errors">Errors</TabsTrigger>
            </TabsList>

            <TabsContent value="overview">
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <div className="space-x-4">
                    <Button
                      onClick={startMigration}
                      disabled={status.isRunning || !source.host || !target.host}
                    >
                      Start Migration
                    </Button>
                    <Button
                      onClick={stopMigration}
                      disabled={!status.isRunning}
                      variant="destructive"
                    >
                      Stop Migration
                    </Button>
                  </div>
                  <div className="text-sm text-gray-500">
                    {status.isRunning ? 'Migration in progress' : 'Migration stopped'}
                  </div>
                </div>

                {/* Progress Bar */}
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div
                    className="bg-blue-600 h-2.5 rounded-full transition-all duration-500"
                    style={{ width: `${status.progress}%` }}
                  ></div>
                </div>

                {/* Statistics */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <Label>Progress</Label>
                    <div className="text-xl font-bold">{status.progress.toFixed(1)}%</div>
                  </div>
                  <div>
                    <Label>Keys Processed</Label>
                    <div className="text-xl font-bold">{status.keysProcessed.toLocaleString()}</div>
                  </div>
                  <div>
                    <Label>Total Keys</Label>
                    <div className="text-xl font-bold">{status.totalKeys.toLocaleString()}</div>
                  </div>
                  <div>
                    <Label>Current Speed</Label>
                    <div className="text-xl font-bold">{status.currentSpeed.toLocaleString()} keys/sec</div>
                  </div>
                  <div>
                    <Label>Estimated Time Remaining</Label>
                    <div className="text-xl font-bold">{estimateTimeRemaining()}</div>
                  </div>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="performance">
              <PerformanceChart data={performanceHistory} />
            </TabsContent>

            <TabsContent value="operations">
              <div className="space-y-2">
                {status.recentOperations?.map((op, index) => (
                  <div key={index} className="flex justify-between items-center text-sm">
                    <span>{op.key}</span>
                    <span className="text-gray-500">{op.operation}</span>
                    <span className="text-gray-500">
                      {new Date(op.timestamp).toLocaleTimeString()}
                    </span>
                  </div>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="errors">
              {status.errors.length > 0 ? (
                <Alert variant="destructive">
                  <AlertDescription>
                    <ul className="list-disc pl-4">
                      {status.errors.map((error, index) => (
                        <li key={index}>{error}</li>
                      ))}
                    </ul>
                  </AlertDescription>
                </Alert>
              ) : (
                <div className="text-gray-500">No errors reported</div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/api/migration/[action]/route.ts (starts at line 1232)

import { NextRequest, NextResponse } from 'next/server';
import { RedisMigrator } from '@/lib/redis-migrator';
import { migrator, migrationStatus, setMigrator } from '@/lib/migration-store';

import { NextRequest, NextResponse } from 'next/server';
import { RedisMigrator } from '@/lib/redis-migrator';
import { migrator, migrationStatus, setMigrator } from '@/lib/migration-store';

export async function POST(request: NextRequest) {
  try {
    const action = request.nextUrl.pathname.split('/').pop();
    
    if (action === 'start') {
      const body = await request.json();
      const { source, target } = body;

      if (!source.host || !target.host) {
        return NextResponse.json(
          { error: 'Source and target configuration required' },
          { status: 400 }
        );
      }

      if (migrationStatus.isRunning) {
        return NextResponse.json(
          { error: 'Migration already in progress' },
          { status: 400 }
        );
      }

      const migratorInstance = new RedisMigrator(
        {
          host: source.host || 'localhost',
          port: parseInt(source.port) || 6379,
          password: source.password || undefined,
          tls: source.tls || false,
        },
        {
          host: target.host || 'localhost',
          port: parseInt(target.port) || 6379,
          password: target.password || undefined,
          tls: target.tls || false,
        }
      );

      // Set up event handlers
      migratorInstance.on('progress', (stats) => {
        migrationStatus.progress = stats.percent;
        migrationStatus.keysProcessed = stats.processed;
        migrationStatus.totalKeys = stats.total;
        migrationStatus.currentSpeed = stats.keysPerSecond;
        migrationStatus.lastUpdate = new Date();
      });

      migratorInstance.on('keyProcessed', (data) => {
        migrationStatus.recentOperations = [
          {
            key: data.key,
            operation: data.operation,
            timestamp: new Date(),
          },
          ...(migrationStatus.recentOperations || []).slice(0, 99)
        ];
      });

      migratorInstance.on('error', (error) => {
        migrationStatus.errors.push(error.message);
      });

      setMigrator(migratorInstance);
      migrationStatus.isRunning = true;
      
      // Start the migration process
      await migratorInstance.start();
      
      return NextResponse.json({ message: 'Migration started' });
    }

export async function GET(
  request: NextRequest,
) {
  const action = request.nextUrl.pathname.split('/').pop();
  
  if (action === 'status') {
    return NextResponse.json(migrationStatus);
  }

  return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
}



================================================================================

File: src/app/api/migration/events/route.ts (starts at line 1322)

// src/app/api/migration/events/route.ts
import { migrator } from '@/lib/migration-store';

interface EventData {
  type: 'progress' | 'keyProcessed' | 'error';
  processed?: number;
  total?: number;
  percent?: number;
  keysPerSecond?: number;
  key?: string;
  operation?: string;
  message?: string;
}

export async function GET() {
  const encoder = new TextEncoder();
  const stream = new ReadableStream({
    start(controller) {
      const send = (data: EventData) => {
        controller.enqueue(encoder.encode(`data: ${JSON.stringify(data)}\n\n`));
      };

      const handlers = {
        progress: (stats: {
          processed: number;
          total: number;
          percent: number;
          keysPerSecond: number;
        }) => {
          send({
            type: 'progress',
            ...stats
          });
        },
        keyProcessed: (data: {
          key: string;
          operation: string;
        }) => {
          send({
            type: 'keyProcessed',
            ...data
          });
        },
        error: (error: Error) => {
          send({
            type: 'error',
            message: error.message
          });
        }
      };

      // Set up event handlers
      if (migrator) {
        migrator.on('progress', handlers.progress);
        migrator.on('keyProcessed', handlers.keyProcessed);
        migrator.on('error', handlers.error);

        // Clean up handlers when the stream closes
        return () => {
          migrator?.removeListener('progress', handlers.progress);
          migrator?.removeListener('keyProcessed', handlers.keyProcessed);
          migrator?.removeListener('error', handlers.error);
        };
      }
    },
    cancel() {
      // Handle client disconnect
      console.log('Client disconnected from SSE');
    }
  });

  return new Response(stream, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
    },
  });
}



================================================================================

File: src/components/performance-chart.tsx (starts at line 1402)

'use client'

import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';

interface PerformanceData {
  timestamp: number;
  speed: number;
  keysProcessed: number;
}

interface PerformanceChartProps {
  data: PerformanceData[];
}

export function PerformanceChart({ data }: PerformanceChartProps) {
  return (
    <div className="w-full h-[300px]">
      <LineChart
        width={800}
        height={300}
        data={data}
        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
      >
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis
          dataKey="timestamp"
          tickFormatter={(timestamp) => new Date(timestamp).toLocaleTimeString()}
        />
        <YAxis />
        <Tooltip
          labelFormatter={(timestamp) => new Date(timestamp).toLocaleTimeString()}
        />
        <Line
          type="monotone"
          dataKey="speed"
          name="Keys/Second"
          stroke="#8884d8"
        />
      </LineChart>
    </div>
  );
}


================================================================================

File: src/components/ui/alert.tsx (starts at line 1444)

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================================================

File: src/components/ui/button.tsx (starts at line 1504)

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================================================

File: src/components/ui/card.tsx (starts at line 1561)

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================================================

File: src/components/ui/input.tsx (starts at line 1641)

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  // Add any custom props here if needed
  customProp?: string;
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================================================

File: src/components/ui/label.tsx (starts at line 1670)

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================================================

File: src/components/ui/switch.tsx (starts at line 1697)

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================================================

File: src/components/ui/tabs.tsx (starts at line 1727)

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================================================

File: src/lib/migration-store.ts (starts at line 1783)

import { RedisMigrator } from './redis-migrator';

export let migrator: RedisMigrator | null = null;

export const migrationStatus = {
  isRunning: false,
  progress: 0,
  keysProcessed: 0,
  totalKeys: 0,
  currentSpeed: 0,
  errors: [] as string[],
  lastUpdate: null as Date | null,
  recentOperations: [] as Array<{
    key: string;
    operation: string;
    timestamp: Date;
  }>,
};

export function setMigrator(instance: RedisMigrator | null) {
  migrator = instance;
}


================================================================================

File: src/lib/redis-migrator.ts (starts at line 1805)

import Redis from 'ioredis';
import { EventEmitter } from 'events';

interface RedisConfig {
  host: string;
  port: number;
  password: string;
  tls?: boolean;
}

interface MigrationStats {
  processed: number;
  total: number;
  errors: string[];
  startTime: number;
  keysPerSecond: number;
}

interface RedisError extends Error {
  code?: string;
  errno?: number;
  syscall?: string;
  hostname?: string;
  command?: string;
}

export class RedisMigrator extends EventEmitter {
  public source: Redis;
  private target: Redis;
  private subscriber: Redis;
  private stats: MigrationStats;
  private initialScanRunning: boolean = false;
  private realtimeSyncEnabled: boolean = false;
  private scanCursor: string = '0';
  private batchSize: number = 1000;
  private keyUpdateQueue: Set<string> = new Set();
  private processingQueue: boolean = false;
  private isRunning: boolean = false;
  private isStopped: boolean = false;

  constructor(sourceConfig: RedisConfig, targetConfig: RedisConfig) {
    super();
    this.source = new Redis({
      host: sourceConfig.host,
      port: sourceConfig.port,
      password: sourceConfig.password,
      tls: sourceConfig.tls ? {} : undefined,
    });

    this.target = new Redis({
      host: targetConfig.host,
      port: targetConfig.port,
      password: targetConfig.password,
      tls: targetConfig.tls ? {} : undefined,
    });

    this.subscriber = this.source.duplicate();

    this.stats = {
      processed: 0,
      total: 0,
      errors: [],
      startTime: 0,
      keysPerSecond: 0,
    };

    this.setupKeyspaceNotifications();
  }

  private async setupKeyspaceNotifications() {
    try {
      await this.source.config('SET', 'notify-keyspace-events', 'AKE');
      await this.subscriber.psubscribe('__keyspace@0__:*');
      
      this.subscriber.on('pmessage', async (_pattern, channel, message) => {
        if (!this.realtimeSyncEnabled) return;
        
        const key = channel.split(':').slice(1).join(':'); // Handle keys with colons
        const operation = message;

        // Handle different operations
        switch (operation) {
          case 'del':
            await this.target.del(key);
            this.emit('keyProcessed', { key, operation: 'delete' });
            break;
          case 'expire':
            const ttl = await this.source.ttl(key);
            if (ttl > 0) {
              await this.target.expire(key, ttl);
            }
            this.emit('keyProcessed', { key, operation: 'expire' });
            break;
          case 'set':
          case 'hset':
          case 'sadd':
          case 'zadd':
          case 'lpush':
          case 'rpush':
            this.keyUpdateQueue.add(key);
            if (!this.processingQueue) {
              await this.processKeyUpdateQueue();
            }
            break;
        }
      });

    } catch (error: unknown) {
      const redisError = error as RedisError;
      const errorMessage = redisError?.message || 'Unknown error during keyspace notification setup';
      this.stats.errors.push(`Failed to setup keyspace notifications: ${errorMessage}`);
      this.emit('error', redisError);
    }
  }

  private async processKeyUpdateQueue() {
    try {
      if (this.keyUpdateQueue.size === 0) {
        this.processingQueue = false;
        return;
      }

      this.processingQueue = true;
      const keys = Array.from(this.keyUpdateQueue);
      this.keyUpdateQueue.clear();

      await Promise.all(keys.map(async (key) => {
        try {
          await this.migrateKey(key);
          this.emit('keyProcessed', { key, operation: 'update' });
        } catch (error: unknown) {
          const redisError = error as RedisError;
          const errorMessage = redisError?.message || `Unknown error processing key ${key}`;
          this.stats.errors.push(`Error processing key ${key}: ${errorMessage}`);
          this.emit('error', redisError);
        }
      }));
    } catch (error: unknown) {
      const redisError = error as RedisError;
      const errorMessage = redisError?.message || `Unknown error processing queue`;
      this.stats.errors.push(`Error processing queue: ${errorMessage}`);
      this.emit('error', redisError);
    }
  }

  private async migrateKey(key: string): Promise<void> {
    try {
      // Check if key exists in source
      const exists = await this.source.exists(key);
      if (!exists) {
        // Key was deleted, delete from target
        await this.target.del(key);
        return;
      }

      const keyType = await this.source.type(key);
      const ttl = await this.source.ttl(key);

      // Handle different data types
      switch (keyType) {
        case 'string':
          await this.migrateString(key);
          break;
        case 'hash':
          await this.migrateHash(key);
          break;
        case 'set':
          await this.migrateSet(key);
          break;
        case 'zset':
          await this.migrateSortedSet(key);
          break;
        case 'list':
          await this.migrateList(key);
          break;
        default:
          throw new Error(`Unsupported key type: ${keyType}`);
      }

      if (ttl > 0) {
        await this.target.expire(key, ttl);
      }

      this.stats.processed++;
      // Ensure processed never exceeds total
      this.stats.processed = Math.min(this.stats.processed, this.stats.total);
      this.updateSpeed();
      
      // Emit progress after each key
      this.emit('progress', {
        processed: this.stats.processed,
        total: this.stats.total,
        percent: Math.min((this.stats.processed / this.stats.total) * 100, 100),
        keysPerSecond: this.stats.keysPerSecond,
      });
    } catch (error: unknown) {
      const redisError = error as RedisError;
      const errorMessage = redisError?.message || `Unknown error migrating key ${key}`;
      throw new Error(`Migration failed for key ${key}: ${errorMessage}`);
    }
  }

  private async migrateString(key: string): Promise<void> {
    const value = await this.source.get(key);
    if (value !== null) {
      await this.target.set(key, value);
    }
  }

  private async migrateHash(key: string): Promise<void> {
    const data = await this.source.hgetall(key);
    if (Object.keys(data).length > 0) {
      await this.target.hmset(key, data);
    }
  }

  private async migrateSet(key: string): Promise<void> {
    const members = await this.source.smembers(key);
    if (members.length > 0) {
      await this.target.sadd(key, ...members);
    }
  }

  private async migrateSortedSet(key: string): Promise<void> {
    const members = await this.source.zrange(key, 0, -1, 'WITHSCORES');
    if (members.length > 0) {
      const args = [];
      for (let i = 0; i < members.length; i += 2) {
        args.push(members[i + 1], members[i]);
      }
      await this.target.zadd(key, ...args);
    }
  }

  private async migrateList(key: string): Promise<void> {
    const items = await this.source.lrange(key, 0, -1);
    if (items.length > 0) {
      // First delete the existing list in target
      await this.target.del(key);
      // Then add all items
      await this.target.rpush(key, ...items);
    }
  }

  private updateSpeed(): void {
    const elapsed = (Date.now() - this.stats.startTime) / 1000;
    this.stats.keysPerSecond = Math.round(this.stats.processed / elapsed);
  }

  public async start(): Promise<void> {
    if (this.initialScanRunning) {
      throw new Error('Initial migration already in progress');
    }

    this.initialScanRunning = true;
    this.realtimeSyncEnabled = true;
    this.isRunning = true;
    this.stats.startTime = Date.now();
    this.scanCursor = '0';
    this.stats.processed = 0;
    this.stats.errors = [];

    try {
      const dbsize = await this.source.dbsize();
      this.stats.total = Number(dbsize);
      
      while (this.initialScanRunning && this.isRunning) {
        const [cursor, keys] = await this.source.scan(
          this.scanCursor,
          'COUNT',
          this.batchSize
        );

        this.scanCursor = cursor;

        await Promise.all(
          keys.map(key => this.migrateKey(key))
        );

        const currentDbSize = await this.source.dbsize();
        this.stats.total = Number(currentDbSize);

        if (cursor === '0') {
          break;
        }
      }

      this.initialScanRunning = false;
      this.emit('scanComplete');
    } catch (error: unknown) {
      const redisError = error as RedisError;
      const errorMessage = redisError?.message || 'Unknown error during migration';
      this.stats.errors.push(`Migration failed: ${errorMessage}`);
      this.emit('error', redisError);
      throw redisError;
    }
  }

  public stop(): void {
    this.initialScanRunning = false;
    this.realtimeSyncEnabled = false;
    this.isRunning = false;
    this.emit('stopped');
  }

  public pauseSync(): void {
    this.realtimeSyncEnabled = false;
    this.emit('syncPaused');
  }

  public resumeSync(): void {
    this.realtimeSyncEnabled = true;
    this.emit('syncResumed');
  }

  public getStats(): MigrationStats {
    return { ...this.stats };
  }

  public async cleanup(): Promise<void> {
    this.stop();
    if (this.subscriber) {
      await this.subscriber.quit();
    }
    await this.source.quit();
    await this.target.quit();
  }

  public async stop(): Promise<void> {
    this.isStopped = true;
    await this.source.quit();
    await this.target.quit();
  }
}



================================================================================

File: src/lib/utils.ts (starts at line 2140)

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================================================

File: src/types/react-native.d.ts (starts at line 2147)

// This empty declaration prevents TypeScript from looking for react-native types
declare module 'react-native' {
  export type ViewStyle = any;
  export type TextStyle = any;
  export type ImageStyle = any;
}



================================================================================